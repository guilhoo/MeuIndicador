import firestore from '@react-native-firebase/firestore';

export const adicionarPontos = async (userId, pontosGanhos) => {
    try {
      const userRef = firestore().collection('users').doc(userId);
  
      // Verifica se o documento existe
      const userDoc = await userRef.get();
      if (!userDoc.exists) {
        console.log("Documento nÃ£o encontrado. Criando um novo documento...");
        // Cria o documento com valores iniciais, incluindo a pontuaÃ§Ã£o
        await userRef.set({
          gamification: {
            pontos: pontosGanhos,
            nivel: 1,
            medalhas: [],
          },
        });
        return;
      }
  
      // Atualiza os pontos do usuÃ¡rio
      await userRef.update({
        'gamification.pontos': firestore.FieldValue.increment(pontosGanhos),
      });
  
      // ðŸ”¶ Aguarda os pontos atualizados antes de atualizar o nÃ­vel
      const userDocAtualizado = await userRef.get();
      const pontosAtualizados = userDocAtualizado.data().gamification.pontos || 0;
      console.log(`Pontos atualizados: ${pontosAtualizados}`);
  
      // Chama a funÃ§Ã£o para atualizar o nÃ­vel apÃ³s adicionar pontos
      await atualizarNivel(userId);
    } catch (error) {
      console.error("Erro ao adicionar pontos:", error);
    }
  };

// FunÃ§Ã£o para verificar nÃ­vel (exemplo bÃ¡sico)
export const atualizarNivel = async (userId) => {
    try {
      const userRef = firestore().collection('users').doc(userId);
  
      // ObtÃ©m o documento do usuÃ¡rio
      const userDoc = await userRef.get();
      const { gamification } = userDoc.data();
  
      if (!gamification) {
        console.error("Dados de gamificaÃ§Ã£o nÃ£o encontrados para o usuÃ¡rio:", userId);
        return;
      }
  
      const { pontos, nivel } = gamification;
  
      // ðŸ”¶ Log para inspecionar pontos e nÃ­vel
      //console.log("Dados de gamificaÃ§Ã£o:", gamification);
      //console.log(`Pontos: ${pontos}, NÃ­vel atual: ${nivel}`);
  
      // Regras de nÃ­veis
      const regrasDeNivel = [
        { nivel: 1, minPontos: 0, maxPontos: 50 },
        { nivel: 2, minPontos: 51, maxPontos: 100 },
        { nivel: 3, minPontos: 101, maxPontos: 150 },
        { nivel: 4, minPontos: 151, maxPontos: 200 },
        { nivel: 5, minPontos: 201, maxPontos: 250 },
        { nivel: 6, minPontos: 251, maxPontos: 300 },
        { nivel: 7, minPontos: 301, maxPontos: 400 },
        { nivel: 8, minPontos: 401, maxPontos: 500 },
        { nivel: 9, minPontos: 501, maxPontos: 600 },
        { nivel: 10, minPontos: 601, maxPontos: Infinity }, // NÃ­vel 10 Ã© ilimitado
      ];
  
      // Determina o novo nÃ­vel com base nos pontos
      const novoNivel = regrasDeNivel.find(
        (regra) => pontos >= regra.minPontos && pontos <= regra.maxPontos
      )?.nivel;
  
      //console.log(`Novo nÃ­vel calculado: ${novoNivel}, NÃ­vel atual: ${nivel}`);
  
      if (novoNivel && novoNivel !== nivel) {
        await userRef.update({
          'gamification.nivel': novoNivel,
        });
        console.log(`UsuÃ¡rio ${userId} subiu para o nÃ­vel ${novoNivel}!`);
      }
    } catch (error) {
      console.error("Erro ao atualizar nÃ­vel:", error);
    }
  };
  
  
